<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the public 'php_translation.storage.app' shared service.

include_once $this->targetDirs[3].'/vendor/php-translation/common/src/Storage.php';
include_once $this->targetDirs[3].'/vendor/php-translation/symfony-bundle/Service/StorageService.php';
include_once $this->targetDirs[3].'/vendor/php-translation/common/src/TransferableStorage.php';
include_once $this->targetDirs[3].'/vendor/php-translation/symfony-storage/src/FileStorage.php';
include_once $this->targetDirs[3].'/vendor/symfony/translation/Reader/TranslationReaderInterface.php';
include_once $this->targetDirs[3].'/vendor/symfony/translation/Reader/TranslationReader.php';

$this->services['php_translation.storage.app'] = $instance = new \Translation\Bundle\Service\StorageService(($this->services['php_translation.catalogue_fetcher'] ?? $this->load('getPhpTranslation_CatalogueFetcherService.php')), ($this->services['php_translation.catalogue_writer'] ?? $this->load('getPhpTranslation_CatalogueWriterService.php')), ($this->privates['php_translation.configuration.app'] ?? $this->load('getPhpTranslation_Configuration_AppService.php')));

$instance->addLocalStorage(new \Translation\SymfonyStorage\FileStorage(($this->privates['translation.writer'] ?? $this->load('getTranslation_WriterService.php')), ($this->privates['translation.reader'] ?? ($this->privates['translation.reader'] = new \Symfony\Component\Translation\Reader\TranslationReader())), [0 => ($this->targetDirs[3].'/translations')], []));

return $instance;
