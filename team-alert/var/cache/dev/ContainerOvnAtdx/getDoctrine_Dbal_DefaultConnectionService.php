<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the public 'doctrine.dbal.default_connection' shared service.

include_once $this->targetDirs[3].'/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/Connection.php';
include_once $this->targetDirs[3].'/vendor/doctrine/dbal/lib/Doctrine/DBAL/Connection.php';
include_once $this->targetDirs[3].'/vendor/doctrine/dbal/lib/Doctrine/DBAL/Configuration.php';
include_once $this->targetDirs[3].'/vendor/doctrine/dbal/lib/Doctrine/DBAL/Logging/LoggerChain.php';
include_once $this->targetDirs[3].'/vendor/symfony/doctrine-bridge/Logger/DbalLogger.php';
include_once $this->targetDirs[3].'/vendor/doctrine/event-manager/lib/Doctrine/Common/EventManager.php';
include_once $this->targetDirs[3].'/vendor/symfony/doctrine-bridge/ContainerAwareEventManager.php';
include_once $this->targetDirs[3].'/vendor/doctrine/event-manager/lib/Doctrine/Common/EventSubscriber.php';
include_once $this->targetDirs[3].'/vendor/knplabs/doctrine-behaviors/src/ORM/AbstractSubscriber.php';
include_once $this->targetDirs[3].'/vendor/knplabs/doctrine-behaviors/src/ORM/Translatable/TranslatableSubscriber.php';
include_once $this->targetDirs[3].'/vendor/knplabs/doctrine-behaviors/src/Reflection/ClassAnalyzer.php';
include_once $this->targetDirs[3].'/vendor/knplabs/doctrine-behaviors/src/ORM/Translatable/CurrentLocaleCallable.php';
include_once $this->targetDirs[3].'/vendor/knplabs/doctrine-behaviors/src/ORM/Translatable/DefaultLocaleCallable.php';
include_once $this->targetDirs[3].'/vendor/knplabs/doctrine-behaviors/src/ORM/SoftDeletable/SoftDeletableSubscriber.php';
include_once $this->targetDirs[3].'/vendor/knplabs/doctrine-behaviors/src/ORM/Timestampable/TimestampableSubscriber.php';
include_once $this->targetDirs[3].'/vendor/knplabs/doctrine-behaviors/src/ORM/Tree/TreeSubscriber.php';
include_once $this->targetDirs[3].'/vendor/knplabs/doctrine-behaviors/src/ORM/Sortable/SortableSubscriber.php';
include_once $this->targetDirs[3].'/vendor/knplabs/doctrine-behaviors/src/ORM/Blameable/BlameableSubscriber.php';
include_once $this->targetDirs[3].'/vendor/knplabs/doctrine-behaviors/src/ORM/Blameable/UserCallable.php';
include_once $this->targetDirs[3].'/vendor/knplabs/doctrine-behaviors/src/ORM/Loggable/LoggableSubscriber.php';
include_once $this->targetDirs[3].'/vendor/knplabs/doctrine-behaviors/src/ORM/Loggable/LoggerCallable.php';
include_once $this->targetDirs[3].'/vendor/knplabs/doctrine-behaviors/src/ORM/Geocodable/GeocodableSubscriber.php';
include_once $this->targetDirs[3].'/vendor/knplabs/doctrine-behaviors/src/ORM/Sluggable/SluggableSubscriber.php';
include_once $this->targetDirs[3].'/vendor/doctrine/doctrine-bundle/ConnectionFactory.php';

$a = new \Doctrine\DBAL\Configuration();

$b = new \Doctrine\DBAL\Logging\LoggerChain();

$c = new \Symfony\Bridge\Monolog\Logger('doctrine');
$c->pushProcessor(($this->privates['debug.log_processor'] ?? ($this->privates['debug.log_processor'] = new \Symfony\Bridge\Monolog\Processor\DebugProcessor())));
$c->pushHandler(($this->privates['monolog.handler.main'] ?? $this->getMonolog_Handler_MainService()));

$b->addLogger(new \Symfony\Bridge\Doctrine\Logger\DbalLogger($c, ($this->privates['debug.stopwatch'] ?? ($this->privates['debug.stopwatch'] = new \Symfony\Component\Stopwatch\Stopwatch(true)))));
$b->addLogger(($this->privates['doctrine.dbal.logger.profiling.default'] ?? ($this->privates['doctrine.dbal.logger.profiling.default'] = new \Doctrine\DBAL\Logging\DebugStack())));

$a->setSQLLogger($b);
$d = new \Symfony\Bridge\Doctrine\ContainerAwareEventManager(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
    'doctrine.orm.default_listeners.attach_entity_listeners' => ['privates', 'doctrine.orm.default_listeners.attach_entity_listeners', 'getDoctrine_Orm_DefaultListeners_AttachEntityListenersService.php', true],
]));

$e = new \Knp\DoctrineBehaviors\Reflection\ClassAnalyzer();

$d->addEventSubscriber(new \Knp\DoctrineBehaviors\ORM\Translatable\TranslatableSubscriber($e, new \Knp\DoctrineBehaviors\ORM\Translatable\CurrentLocaleCallable($this), new \Knp\DoctrineBehaviors\ORM\Translatable\DefaultLocaleCallable('nl'), 'Knp\\DoctrineBehaviors\\Model\\Translatable\\Translatable', 'Knp\\DoctrineBehaviors\\Model\\Translatable\\Translation', 'LAZY', 'LAZY'));
$d->addEventSubscriber(new \Knp\DoctrineBehaviors\ORM\SoftDeletable\SoftDeletableSubscriber($e, true, 'Knp\\DoctrineBehaviors\\Model\\SoftDeletable\\SoftDeletable'));
$d->addEventSubscriber(new \Knp\DoctrineBehaviors\ORM\Timestampable\TimestampableSubscriber($e, true, 'Knp\\DoctrineBehaviors\\Model\\Timestampable\\Timestampable', 'datetime'));
$d->addEventSubscriber(new \Knp\DoctrineBehaviors\ORM\Tree\TreeSubscriber($e, true, 'Knp\\DoctrineBehaviors\\Model\\Tree\\Node'));
$d->addEventSubscriber(new \Knp\DoctrineBehaviors\ORM\Sortable\SortableSubscriber($e, true, 'Knp\\DoctrineBehaviors\\Model\\Sortable\\Sortable'));
$d->addEventSubscriber(new \Knp\DoctrineBehaviors\ORM\Blameable\BlameableSubscriber($e, true, 'Knp\\DoctrineBehaviors\\Model\\Blameable\\Blameable', new \Knp\DoctrineBehaviors\ORM\Blameable\UserCallable($this), NULL));
$d->addEventSubscriber(new \Knp\DoctrineBehaviors\ORM\Loggable\LoggableSubscriber($e, true, new \Knp\DoctrineBehaviors\ORM\Loggable\LoggerCallable(($this->privates['monolog.logger'] ?? $this->getMonolog_LoggerService()))));
$d->addEventSubscriber(new \Knp\DoctrineBehaviors\ORM\Geocodable\GeocodableSubscriber($e, true, 'Knp\\DoctrineBehaviors\\Model\\Geocodable\\Geocodable', NULL));
$d->addEventSubscriber(new \Knp\DoctrineBehaviors\ORM\Sluggable\SluggableSubscriber($e, true, 'Knp\\DoctrineBehaviors\\Model\\Sluggable\\Sluggable'));
$d->addEventListener([0 => 'loadClassMetadata'], 'doctrine.orm.default_listeners.attach_entity_listeners');

return $this->services['doctrine.dbal.default_connection'] = (new \Doctrine\Bundle\DoctrineBundle\ConnectionFactory([]))->createConnection(['driver' => 'pdo_mysql', 'charset' => 'utf8', 'url' => $this->getEnv('resolve:DATABASE_URL'), 'host' => 'localhost', 'port' => NULL, 'user' => 'root', 'password' => NULL, 'driverOptions' => [], 'serverVersion' => '5.5', 'defaultTableOptions' => ['charset' => 'utf8', 'collate' => 'utf8_unicode_ci']], $a, $d, []);
